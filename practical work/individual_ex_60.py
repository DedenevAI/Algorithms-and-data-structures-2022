#*–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ 60 
#*–ß–∞—Ç-–±–æ—Ç –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑–µ. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫
#*–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–º–æ—â—å—é —á–∞—Ç-–±–æ—Ç–∞.

import telebot
import wikipedia
from random import random
from telebot import types

#bot initialization
API_TOKEN = '5952398693:AAF7xvTeDuZnSJc9w32dL8pe0wcoxCVloN0'
bot = telebot.TeleBot(API_TOKEN)

#starting command
@bot.message_handler(commands=['start'])
def start(message):
   markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
   item1 = types.KeyboardButton('üé´–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π!')
   item2 = types.KeyboardButton('üñ•–ê–≤—Ç–æ—Ä')
   
   
   markup.add(item1,item2)

   bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –í–∞—à –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫! –Ø –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑–µ, –ø–æ–ª—É—á–∞—é URL-—Å—Å—ã–ª–∫–∏ —Å—Ç–∞—Ç–µ–π –∏ —Ñ–æ—Ä–º–∏—Ä—É—é –∏–∑ –Ω–∏—Ö —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è—é –í–∞–º!".format(message.from_user), reply_markup = markup)

@bot.message_handler(content_types=['text'])
def bot_message(message): 
    if message.chat.type == 'private':
        if message.text == 'üñ•–ê–≤—Ç–æ—Ä':
            bot.send_message(message.chat.id, '–°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã –£-223' + '\n' +'–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –î–µ–¥–µ–Ω–µ–≤'  + '\n' +'GitHub: https://github.com/DedenevAI/DedenevAI')
        
        elif message.text == 'üé´–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π!':
            sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –ø–æ–∏—Å–∫')
            bot.register_next_step_handler(sent, searcher)
        else:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—É–Ω–∫—Ç–∞–º–∏ –º–µ–Ω—é')

@bot.message_handler(func=lambda message: True)
def searcher(message):
    key = message.text
    bot.send_message(message.chat.id, "–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É " + key + "......")
    
    wikipedia.set_lang("en")
    wikipedia.random(pages=1)
    links = wikipedia.search(key,results = 5)
    test=[]
    for link in links:
        try:
            #try to load the wikipedia page
            page=wikipedia.page(link, auto_suggest=False, redirect=True, preload=False)
            test.append(page.url)
        except wikipedia.exceptions.PageError:
            #if a "PageError" was raised, ignore it and continue to next link
            continue
        except wikipedia.exceptions.DisambiguationError as e:
            #if a "DisambiguationError" was raised, make random choice from list of options
            s = random.choice(e.options)
            page1 = wikipedia.page(s)
            test.append(page1.url)
    with open("references.txt", "w") as file:
        for row in test:
            f = file.write(row + "\n")
    
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!")
    bot.send_document(message.chat.id, open(r'C:\\Users\\Alex\\DedenevAI\\references.txt', 'rb') )

                
            


            

            
                        






#This function creates a new Thread that calls an internal __retrieve_updates function. 
#This allows the bot to retrieve Updates automatically and notify listeners and message handlers accordingly.
#This part required for the bot to work.
bot.polling(none_stop=True) 